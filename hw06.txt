Сумма первых 800 элементов посл-ти: 0.6666666666666667
Filename: C:\Users\TOSHIBA\Downloads\hw06_with_recursion.py

Line #    Mem usage    Increment   Line Contents
================================================
     3     26.6 MiB     26.6 MiB   @profile
     4                             def with_recursion(n):
     5     27.4 MiB      0.0 MiB       def my_recursion4(i):
     6     27.4 MiB      0.0 MiB           if i == 1:
     7     27.4 MiB      0.0 MiB               return i
     8                                     else:
     9     27.4 MiB      0.0 MiB               return - my_recursion4(i-1)/2
    10
    11     26.6 MiB      0.0 MiB       i, res = 1, 0
    12     27.4 MiB      0.0 MiB       while i <= n:
    13     27.4 MiB      0.0 MiB           res += my_recursion4(i)
    14     27.4 MiB      0.0 MiB           i += 1
    15
    16     27.4 MiB      0.0 MiB       print('Сумма первых {} элементов посл-ти:
 {}'.format(n, res))

Сумма первых 800 элементов посл-ти: 0.6666666666666667
Filename: C:\Users\TOSHIBA\Downloads\hw06_without_recursion.py

Line #    Mem usage    Increment   Line Contents
================================================
     3     26.5 MiB     26.5 MiB   @profile
     4                             def without_recursion(n):
     5     26.5 MiB      0.0 MiB       i, s, res = 1, 0, 1
     6     26.5 MiB      0.0 MiB       while s <= n:
     7     26.5 MiB      0.0 MiB           i = -i/2
     8     26.5 MiB      0.0 MiB           res += i
     9     26.5 MiB      0.0 MiB           s += 1
    10
    11     26.6 MiB      0.0 MiB       print('Сумма первых {} элементов посл-ти:
 {}'.format(n, res))


Байт: 860
Filename: C:\Users\TOSHIBA\Downloads\hw06_naive_search.py

Line #    Mem usage    Increment   Line Contents
================================================
     4     26.6 MiB     26.6 MiB   @profile
     5                             def naive_search(n):
     6     26.6 MiB      0.0 MiB       prime_numbers = [2]
     7     26.6 MiB      0.0 MiB       i = prime_numbers[0]
     8     26.6 MiB      0.0 MiB       while len(prime_numbers) != n:
     9     26.6 MiB      0.0 MiB           i += 1
    10     26.6 MiB      0.0 MiB           for d in range(2, i):
    11     26.6 MiB      0.0 MiB               i_is_prime = True
    12     26.6 MiB      0.0 MiB               if i%d == 0:
    13     26.6 MiB      0.0 MiB                   i_is_prime = False
    14     26.6 MiB      0.0 MiB                   break
    15     26.6 MiB      0.0 MiB           if i_is_prime:
    16     26.6 MiB      0.0 MiB               prime_numbers.append(i)
    17
    18     26.6 MiB      0.0 MiB       print('Байт:', getsizeof(prime_numbers))


Байт: 768
Filename: C:\Users\TOSHIBA\Downloads\hw06_naive_search_with_np.py

Line #    Mem usage    Increment   Line Contents
================================================
     5     32.7 MiB     32.7 MiB   @profile
     6                             def naive_search_with_np(n):
     7     32.7 MiB      0.0 MiB       prime_numbers = np_array([2])
     8     32.7 MiB      0.0 MiB       i = prime_numbers[0]
     9     33.1 MiB      0.0 MiB       while len(prime_numbers) != n:
    10     33.1 MiB      0.0 MiB           i += 1
    11     33.1 MiB      0.1 MiB           for d in np_arange(2, i):
    12     33.1 MiB      0.0 MiB               i_is_prime = True
    13     33.1 MiB      0.0 MiB               if i%d == 0:
    14     33.1 MiB      0.0 MiB                   i_is_prime = False
    15     33.1 MiB      0.0 MiB                   break
    16     33.1 MiB      0.0 MiB           if i_is_prime:
    17     33.1 MiB      0.0 MiB               prime_numbers = np_append(prime_n
umbers, i)
    18
    19     33.1 MiB      0.0 MiB       print('Байт:', getsizeof(prime_numbers))



[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,
 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163
, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251
, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349
, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443
, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557
, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647
, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757
, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863
, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983
, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 10
69]
Filename: C:\Users\TOSHIBA\Downloads\hw06_eratosthenes_sieve2.py

Line #    Mem usage    Increment   Line Contents
================================================
     3     26.5 MiB     26.5 MiB   @profile
     4                             def eratosthenes_sieve2(m, mltplct=2):
     5     26.5 MiB      0.0 MiB       def eratosthenes_sieve(n):
     6     26.5 MiB      0.0 MiB           a = [0] * n
     7     26.5 MiB      0.0 MiB           for i in range(n):
     8     26.5 MiB      0.0 MiB               a[i] = i
     9
    10     26.5 MiB      0.0 MiB           a[1] = 0
    11
    12     26.5 MiB      0.0 MiB           m = 2
    13     26.5 MiB      0.0 MiB           while m < n:
    14     26.5 MiB      0.0 MiB               if a[m] != 0:
    15     26.5 MiB      0.0 MiB                   j = m * 2
    16     26.5 MiB      0.0 MiB                   while j < n:
    17     26.5 MiB      0.0 MiB                       a[j] = 0
    18     26.5 MiB      0.0 MiB                       j = j + m
    19     26.5 MiB      0.0 MiB               m += 1
    20
    21     26.5 MiB      0.0 MiB           prime_numbers = []
    22     26.5 MiB      0.0 MiB           for i in a:
    23     26.5 MiB      0.0 MiB               if a[i] != 0:
    24     26.5 MiB      0.0 MiB                   prime_numbers.append(a[i])
    25
    26     26.5 MiB      0.0 MiB           return prime_numbers
    27
    28     26.5 MiB      0.0 MiB       prime_numbers_count, n = 0, 100
    29     26.5 MiB      0.0 MiB       while prime_numbers_count <= m:
    30     26.5 MiB      0.0 MiB           prime_numbers = eratosthenes_sieve(n)

    31     26.5 MiB      0.0 MiB           prime_numbers_count = len(prime_numbe
rs)
    32     26.5 MiB      0.0 MiB           n *= mltplct
    33
    34     26.6 MiB      0.0 MiB       print(prime_numbers[0:m])


