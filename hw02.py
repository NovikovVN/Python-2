# 1. Написать программу, которая будет складывать, вычитать, умножать или делить
# два числа. Числа и знак операции вводятся пользователем. После выполнения
# вычисления программа не должна завершаться, а должна запрашивать новые данные
# для вычислений. Завершение программы должно выполняться при вводе символа '0'
# в качестве знака операции. Если пользователь вводит неверный знак
# (не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
# снова запрашивать знак операции. Также сообщать пользователю о невозможности
# деления на ноль, если он ввел 0 в качестве делителя.

yes = 'y'
while yes in ('y', 'yes'):
    try:
        a = float(input('Введите первое число a: '))
        b = float(input('Введите второе число b: '))
    except ValueError:
        print('Введено не число!')
    else:
        operator = input('Введите операцию для a и b: ')
        while not operator in ('+', '-', '*', '/'):
            operator = input('''Операция "{}" не поддерживается!\n
                             Введите операцию для a и b: '''.format(operator))
        while b == 0 and operator == '/':
            b = float(input('Делить на 0 нельзя! Введите второе число b: '))
        if operator == '+':
            print('{} + {} = {}'.format(a, b, a + b))
        elif operator == '-':
            print('{} - {} = {}'.format(a, b, a - b))
        elif operator == '*':
            print('{} * {} = {}'.format(a, b, a * b))
        else:
            print('{} / {} = {}'.format(a, b, a / b))
    yes = input('Продолжать дальше? (y / n)').lower()


# 2. Посчитать четные и нечетные цифры введенного натурального числа. Например,
# если введено число 34560, то у него 3 четные цифры (4, 6 и 0)
# и 2 нечетные (3 и 5).

try:
    x = int(input('Введите число: '))
except ValueError:
    print('Введено не число!')
else:
    n = abs(x)
    digits = {'Четные': 0, 'Нечетные': 0}
    while n > 0:
        if (n%10)%2 == 0:
            digits['Четные'] += 1
        else:
            digits['Нечетные'] += 1
        n //= 10

    print('Четных цифр: {}\nНечетных цифр: {}'.format(digits['Четные'], \
                                                      digits['Нечетные']))


# 3. Сформировать из введенного числа обратное по порядку входящих в него цифр
# и вывести на экран. Например, если введено число 3486, то надо вывести 6843.

try:
    x = int(input('Введите число: '))
except ValueError:
    print('Введено не число!')
else:
    n = abs(x)
    x_reverse = 0
    while n > 0:
        x_reverse = x_reverse * 10 + n%10
        n //= 10
    print('Число, обратное по цифрам:', x_reverse)


# 4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
# Количество элементов (n) вводится с клавиатуры.

def my_recursion4(i):
    if i == 1:
        return i
    else:
        return - my_recursion4(i-1)/2

try:
    n = int(input('Введите n - длину посл-ти: '))
except ValueError:
    print('Введено не число!')
else:
    i, res = 1, 0
    while i <= n:
        res += my_recursion4(i)
        i += 1

    print('Сумма первых {} элементов посл-ти: {}'.format(n, res))
    # 0.625 для n = 4


# 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под
# номером 32 и заканчивая 127-м включительно. Вывод выполнить в табличной форме:
# по десять пар "код-символ" в каждой строке.

# Сделан вывод символов таблицы Unicode (с 0 по 127 совпадает с таблицей ASCII).

for i in range(32, 128):
    print('{}: {} '.format(i, chr(i)), end='')
    if (i - 1) % 10 == 0:
        print()


# 6. В программе генерируется случайное целое число от 0 до 100. Пользователь
# должен его отгадать не более чем за 10 попыток. После каждой неудачной попытки
# должно сообщаться больше или меньше введенное пользователем число, чем то, что
# загадано. Если за 10 попыток число не отгадано, то вывести загаданное число.

from random import randint

x = randint(0, 10)

n = 10
while n > 0:
    try:
        x_user = int(input('Осталось {} попыток. Введите число: '.format(n)))
    except ValueError:
        print('Введено не число!')
    else:
        if x_user > x:
            print('x меньше!')
        elif x_user < x:
            print('x больше!')
        else:
            print('Вы угадали! x =', x_user)
            break
    n -= 1
    if n == 0:
        print('Вы не угадали! x =', x)


# 7. Напишите программу, доказывающую или проверяющую, что для множества
# натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
# где n - любое натуральное число.

def my_recursion7(i):
    if i == 0:
        return 0
    else:
        return my_recursion7(i-1) + i

try:
    n = int(input('Введите n - длину посл-ти: '))
except ValueError:
    print('Введено не число!')
else:
    if n*(n+1)/2 == my_recursion7(n):
        print('Сумма 1+2+...+n :', my_recursion7(n))
        print('n*(n+1)/2 :', int(n*(n+1)/2))
    else:
        print('Равенства нет!') # Равенство всегда выполняется


# 8. Посчитать, сколько раз встречается определенная цифра в введенной
# последовательности чисел. Количество вводимых чисел и цифра, которую
# необходимо посчитать, задаются вводом с клавиатуры.

digits = {}
yes = 'y'
while yes in ('y', 'yes'):
    try:
        x = int(input('Введите число: '))
    except ValueError:
        print('Введено не число!')
    else:
        n = abs(x)
        while n > 0:
            d = n%10
            digits[d] = digits.setdefault(d, 0) + 1
            n //= 10
    yes = input('Продолжать дальше? (y / n)').lower()

try:
    digit = int(input('Введите цифру: '))
except ValueError:
    print('Введено не число!')
else:
    if digit//10 == 0:
        print('Цифра {} встретилась {} раз'.format(digit, \
                                            digits.setdefault(digit, 0)))
    else:
        print('Введена не цифра!')


# 9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме
# цифр. Вывести на экран это число и сумму его цифр.

numbers = {}
yes = 'y'
while yes in ('y', 'yes'):
    try:
        x = int(input('Введите число: '))
    except ValueError:
        print('Введено не число!')
    else:
        sum = 0
        n = abs(x)
        while n > 0:
            sum += n%10
            n //= 10
        numbers[x] = sum
        if sum == max(numbers.values()):
            x_max = x
            sum_max = sum
    yes = input('Продолжать дальше? (y / n)').lower()

print('Наибольшая сумма цифр ({}) у числа {}'.format(sum_max, x_max))